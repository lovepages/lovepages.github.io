{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[{"title":"about","date":"2024-07-01T09:40:01.000Z","updated":"2024-07-01T09:40:01.143Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/","excerpt":"","text":""},{"title":"contact","date":"2024-07-01T09:40:17.000Z","updated":"2024-07-01T09:40:17.647Z","comments":true,"path":"contact/index.html","permalink":"http://example.com/contact/","excerpt":"","text":""},{"title":"friends","date":"2024-07-01T09:40:33.000Z","updated":"2024-07-01T09:40:33.798Z","comments":true,"path":"friends/index.html","permalink":"http://example.com/friends/","excerpt":"","text":""},{"title":"tags","date":"2024-07-01T09:39:16.000Z","updated":"2024-07-01T09:39:16.569Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/","excerpt":"","text":""}],"posts":[{"title":"XXL-JOB 客户端连接代码","slug":"XXL-JOB 客户端连接","date":"2024-07-02T08:41:46.415Z","updated":"2024-07-02T09:05:58.431Z","comments":true,"path":"2024/07/02/XXL-JOB 客户端连接/","permalink":"http://example.com/2024/07/02/XXL-JOB%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BF%9E%E6%8E%A5/","excerpt":"","text":"XXL-JOB 客户端连接代码 官网： https://www.xuxueli.com/xxl-job/ 优点（开发息息相关）支持动态修改任务状态、启动/停止任务，以及终止运行中任务，即时生效； 注册中心: 自动注册任务、行手动录入执行器地址； 触发策略：Cron触发、固定间隔触发、固定延时触发、API（事件）触发、人工触发、父子任务触发； 路由策略：执行器集群部署时提供丰富的路由策略，包括：第一个、最后一个、轮询、随机、一致性HASH、最不经常使用、最近最久未使用、故障转移、忙碌转移等； 自定义任务参数：支持在线配置调度任务入参，即时生效； 一致性：“调度中心”通过DB锁保证集群分布式调度的一致性, 一次任务调度只会触发一次执行； GLUE：提供Web IDE，支持在线开发任务逻辑代码，动态发布，实时编译生效，省略部署上线的过程 报单系统整合xxl-job步骤环境搭建 下载 xxl-job源码,选择适合的git 分支，对应版本 12git clone https://gitee.com/xuxueli0323/xxl-job 源码目录介绍 - /doc :文档资料 - /db :“调度数据库”建表脚本 - /xxl-job-admin :调度中心，项目源码 - /xxl-job-core :公共Jar依赖 - /xxl-job-executor-samples :执行器，Sample示例项目（大家可以在该项目上进行开发，也可以将现有项目改造生成执行器项目） 调度数据库表说明如下： - xxl_job_lock：任务调度锁表； - xxl_job_group：执行器信息表，维护任务执行器信息； - xxl_job_info：调度扩展信息表： 用于保存XXL-JOB调度任务的扩展信息，如任务分组、任务名、机器地址、执行器、执行入参和报警邮件等等； - xxl_job_log：调度日志表： 用于保存XXL-JOB任务调度的历史信息，如调度结果、执行结果、调度入参、调度机器和执行器等等； - xxl_job_log_report：调度日志报表：用户存储XXL-JOB任务调度日志的报表，调度中心报表功能页面会用到； - xxl_job_logglue：任务GLUE日志：用于保存GLUE更新历史，用于支持GLUE的版本回溯功能； - xxl_job_registry：执行器注册表，维护在线的执行器和调度中心机器地址信息； - xxl_job_user：系统用户表； 使用 /xxl-job/doc/db/tables_xxl_job.sql 脚本创建库表 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121## XXL-JOB v2.3.0# Copyright (c) 2015-present, xuxueli.CREATE database if NOT EXISTS `xxl_job` default character set utf8mb4 collate utf8mb4_unicode_ci;use `xxl_job`;SET NAMES utf8mb4;CREATE TABLE `xxl_job_info` ( `id` int(11) NOT NULL AUTO_INCREMENT, `job_group` int(11) NOT NULL COMMENT '执行器主键ID', `job_desc` varchar(255) NOT NULL, `add_time` datetime DEFAULT NULL, `update_time` datetime DEFAULT NULL, `author` varchar(64) DEFAULT NULL COMMENT '作者', `alarm_email` varchar(255) DEFAULT NULL COMMENT '报警邮件', `schedule_type` varchar(50) NOT NULL DEFAULT 'NONE' COMMENT '调度类型', `schedule_conf` varchar(128) DEFAULT NULL COMMENT '调度配置，值含义取决于调度类型', `misfire_strategy` varchar(50) NOT NULL DEFAULT 'DO_NOTHING' COMMENT '调度过期策略', `executor_route_strategy` varchar(50) DEFAULT NULL COMMENT '执行器路由策略', `executor_handler` varchar(255) DEFAULT NULL COMMENT '执行器任务handler', `executor_param` varchar(512) DEFAULT NULL COMMENT '执行器任务参数', `executor_block_strategy` varchar(50) DEFAULT NULL COMMENT '阻塞处理策略', `executor_timeout` int(11) NOT NULL DEFAULT '0' COMMENT '任务执行超时时间，单位秒', `executor_fail_retry_count` int(11) NOT NULL DEFAULT '0' COMMENT '失败重试次数', `glue_type` varchar(50) NOT NULL COMMENT 'GLUE类型', `glue_source` mediumtext COMMENT 'GLUE源代码', `glue_remark` varchar(128) DEFAULT NULL COMMENT 'GLUE备注', `glue_updatetime` datetime DEFAULT NULL COMMENT 'GLUE更新时间', `child_jobid` varchar(255) DEFAULT NULL COMMENT '子任务ID，多个逗号分隔', `trigger_status` tinyint(4) NOT NULL DEFAULT '0' COMMENT '调度状态：0-停止，1-运行', `trigger_last_time` bigint(13) NOT NULL DEFAULT '0' COMMENT '上次调度时间', `trigger_next_time` bigint(13) NOT NULL DEFAULT '0' COMMENT '下次调度时间', PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;CREATE TABLE `xxl_job_log` ( `id` bigint(20) NOT NULL AUTO_INCREMENT, `job_group` int(11) NOT NULL COMMENT '执行器主键ID', `job_id` int(11) NOT NULL COMMENT '任务，主键ID', `executor_address` varchar(255) DEFAULT NULL COMMENT '执行器地址，本次执行的地址', `executor_handler` varchar(255) DEFAULT NULL COMMENT '执行器任务handler', `executor_param` varchar(512) DEFAULT NULL COMMENT '执行器任务参数', `executor_sharding_param` varchar(20) DEFAULT NULL COMMENT '执行器任务分片参数，格式如 1/2', `executor_fail_retry_count` int(11) NOT NULL DEFAULT '0' COMMENT '失败重试次数', `trigger_time` datetime DEFAULT NULL COMMENT '调度-时间', `trigger_code` int(11) NOT NULL COMMENT '调度-结果', `trigger_msg` text COMMENT '调度-日志', `handle_time` datetime DEFAULT NULL COMMENT '执行-时间', `handle_code` int(11) NOT NULL COMMENT '执行-状态', `handle_msg` text COMMENT '执行-日志', `alarm_status` tinyint(4) NOT NULL DEFAULT '0' COMMENT '告警状态：0-默认、1-无需告警、2-告警成功、3-告警失败', PRIMARY KEY (`id`), KEY `I_trigger_time` (`trigger_time`), KEY `I_handle_code` (`handle_code`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;CREATE TABLE `xxl_job_log_report` ( `id` int(11) NOT NULL AUTO_INCREMENT, `trigger_day` datetime DEFAULT NULL COMMENT '调度-时间', `running_count` int(11) NOT NULL DEFAULT '0' COMMENT '运行中-日志数量', `suc_count` int(11) NOT NULL DEFAULT '0' COMMENT '执行成功-日志数量', `fail_count` int(11) NOT NULL DEFAULT '0' COMMENT '执行失败-日志数量', `update_time` datetime DEFAULT NULL, PRIMARY KEY (`id`), UNIQUE KEY `i_trigger_day` (`trigger_day`) USING BTREE) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;CREATE TABLE `xxl_job_logglue` ( `id` int(11) NOT NULL AUTO_INCREMENT, `job_id` int(11) NOT NULL COMMENT '任务，主键ID', `glue_type` varchar(50) DEFAULT NULL COMMENT 'GLUE类型', `glue_source` mediumtext COMMENT 'GLUE源代码', `glue_remark` varchar(128) NOT NULL COMMENT 'GLUE备注', `add_time` datetime DEFAULT NULL, `update_time` datetime DEFAULT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;CREATE TABLE `xxl_job_registry` ( `id` int(11) NOT NULL AUTO_INCREMENT, `registry_group` varchar(50) NOT NULL, `registry_key` varchar(255) NOT NULL, `registry_value` varchar(255) NOT NULL, `update_time` datetime DEFAULT NULL, PRIMARY KEY (`id`), KEY `i_g_k_v` (`registry_group`,`registry_key`,`registry_value`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;CREATE TABLE `xxl_job_group` ( `id` int(11) NOT NULL AUTO_INCREMENT, `app_name` varchar(64) NOT NULL COMMENT '执行器AppName', `title` varchar(12) NOT NULL COMMENT '执行器名称', `address_type` tinyint(4) NOT NULL DEFAULT '0' COMMENT '执行器地址类型：0=自动注册、1=手动录入', `address_list` text COMMENT '执行器地址列表，多地址逗号分隔', `update_time` datetime DEFAULT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;CREATE TABLE `xxl_job_user` ( `id` int(11) NOT NULL AUTO_INCREMENT, `username` varchar(50) NOT NULL COMMENT '账号', `password` varchar(50) NOT NULL COMMENT '密码', `role` tinyint(4) NOT NULL COMMENT '角色：0-普通用户、1-管理员', `permission` varchar(255) DEFAULT NULL COMMENT '权限：执行器ID列表，多个逗号分割', PRIMARY KEY (`id`), UNIQUE KEY `i_username` (`username`) USING BTREE) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;CREATE TABLE `xxl_job_lock` ( `lock_name` varchar(50) NOT NULL COMMENT '锁名称', PRIMARY KEY (`lock_name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;INSERT INTO `xxl_job_group`(`id`, `app_name`, `title`, `address_type`, `address_list`, `update_time`) VALUES (1, 'xxl-job-executor-sample', '示例执行器', 0, NULL, '2018-11-03 22:21:31' );INSERT INTO `xxl_job_info`(`id`, `job_group`, `job_desc`, `add_time`, `update_time`, `author`, `alarm_email`, `schedule_type`, `schedule_conf`, `misfire_strategy`, `executor_route_strategy`, `executor_handler`, `executor_param`, `executor_block_strategy`, `executor_timeout`, `executor_fail_retry_count`, `glue_type`, `glue_source`, `glue_remark`, `glue_updatetime`, `child_jobid`) VALUES (1, 1, '测试任务1', '2018-11-03 22:21:31', '2018-11-03 22:21:31', 'XXL', '', 'CRON', '0 0 0 * * ? *', 'DO_NOTHING', 'FIRST', 'demoJobHandler', '', 'SERIAL_EXECUTION', 0, 0, 'BEAN', '', 'GLUE代码初始化', '2018-11-03 22:21:31', '');INSERT INTO `xxl_job_user`(`id`, `username`, `password`, `role`, `permission`) VALUES (1, 'admin', 'e10adc3949ba59abbe56e057f20f883e', 1, NULL);INSERT INTO `xxl_job_lock` ( `lock_name`) VALUES ( 'schedule_lock');commit; 修改 xxl-job-admin 模块的 application.properties 配置文件，可以修改 端口、访问路径、数据库连接参数、token等 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566### webserver.servlet.context-path=/xxl-job-admin### actuatormanagement.server.servlet.context-path=/actuatormanagement.health.mail.enabled=false### resourcesspring.mvc.servlet.load-on-startup=0spring.mvc.static-path-pattern=/static/**spring.resources.static-locations=classpath:/static/### freemarkerspring.freemarker.templateLoaderPath=classpath:/templates/spring.freemarker.suffix=.ftlspring.freemarker.charset=UTF-8spring.freemarker.request-context-attribute=requestspring.freemarker.settings.number_format=0.############# mybatismybatis.mapper-locations=classpath:/mybatis-mapper/*Mapper.xml#mybatis.type-aliases-package=com.xxl.job.admin.core.model### xxl-job, datasourcespring.datasource.url=jdbc:mysql://127.0.0.1:3306/xxl_job?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghaispring.datasource.username=rootspring.datasource.password=rootspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver### datasource-poolspring.datasource.type=com.zaxxer.hikari.HikariDataSourcespring.datasource.hikari.minimum-idle=10spring.datasource.hikari.maximum-pool-size=30spring.datasource.hikari.auto-commit=truespring.datasource.hikari.idle-timeout=30000spring.datasource.hikari.pool-name=HikariCPspring.datasource.hikari.max-lifetime=900000spring.datasource.hikari.connection-timeout=10000spring.datasource.hikari.connection-test-query=SELECT 1spring.datasource.hikari.validation-timeout=1000### xxl-job, emailspring.mail.host=smtp.qq.comspring.mail.port=25spring.mail.username=xxx@qq.comspring.mail.from=xxx@qq.comspring.mail.password=xxxspring.mail.properties.mail.smtp.auth=truespring.mail.properties.mail.smtp.starttls.enable=truespring.mail.properties.mail.smtp.starttls.required=truespring.mail.properties.mail.smtp.socketFactory.class=javax.net.ssl.SSLSocketFactory### xxl-job, access tokenxxl.job.accessToken=bde4c9f07e1c416d9c85918825f00cf6### xxl-job, i18n (default is zh_CN, and you can choose \"zh_CN\", \"zh_TC\" and \"en\")xxl.job.i18n=zh_CN## xxl-job, triggerpool max sizexxl.job.triggerpool.fast.max=200xxl.job.triggerpool.slow.max=100### xxl-job, log retention daysxxl.job.logretentiondays=30 打包，执行命令启动 12java -jar xxl-job-admin-2.3.0.jar 访问&nbsp;http://ip:port/xxl-job-admin 可以设置任务、执行器 创建mall-xxl-job模块 引入依赖 &lt;dependency&gt; &lt;groupId&gt;com.xuxueli&lt;/groupId&gt; &lt;artifactId&gt;xxl-job-core&lt;/artifactId&gt; &lt;version&gt;2.3.0&lt;/version&gt; &lt;/dependency&gt; spring-boot 启动配置 logging.config=classpath:logback.xml xxl.job.accessToken=dev_token xxl.job.admin.addresses=https://xxl-dev.miaoyinbusiness.com/xxl-job xxl.job.executor.address= xxl.job.executor.appname=${spring.application.name} xxl.job.executor.ip= xxl.job.executor.logpath=/data/applogs/xxl-job/jobhandler xxl.job.executor.logretentiondays=30 xxl.job.executor.port=${server.port} 配置执行器 1234567891011121314151617181920212223242526272829303132333435363738394041424344@Configuration@Slf4jpublic class XxlJobConfig { @Value(\"${xxl.job.admin.addresses}\") private String adminAddresses; @Value(\"${xxl.job.accessToken}\") private String accessToken; @Value(\"${xxl.job.executor.appname}\") private String appname; @Value(\"${xxl.job.executor.address}\") private String address; @Value(\"${xxl.job.executor.ip}\") private String ip; @Value(\"${xxl.job.executor.port}\") private int port; @Value(\"${xxl.job.executor.logpath}\") private String logPath; @Value(\"${xxl.job.executor.logretentiondays}\") private int logRetentionDays; @Bean public XxlJobSpringExecutor xxlJobExecutor() { XxlJobSpringExecutor xxlJobSpringExecutor = new XxlJobSpringExecutor(); xxlJobSpringExecutor.setAdminAddresses(adminAddresses); xxlJobSpringExecutor.setAppname(appname); xxlJobSpringExecutor.setAddress(address); xxlJobSpringExecutor.setIp(ip); //使用偏移量：项目端口+1 xxlJobSpringExecutor.setPort(port + 1); xxlJobSpringExecutor.setAccessToken(accessToken); xxlJobSpringExecutor.setLogPath(logPath); xxlJobSpringExecutor.setLogRetentionDays(logRetentionDays); return xxlJobSpringExecutor; }} 模块使用（比如admin 需要使用xxl-job） 在需要定时任务的模块（比如admin）,引入 mall-xxl-job 模块 12345&lt;dependency&gt; &lt;groupId&gt;com.macro.mall&lt;/groupId&gt; &lt;artifactId&gt;mall-xxl-job&lt;/artifactId&gt;&lt;/dependency&gt; 编辑jobHandler 123456789101112131415161718@Component@Slf4jpublic class OrderScheduled { @Resource private OmsOrderProfitService orderProfitService; /** * 每天11点30分再次发放失败的权益 */ @XxlJob(\"sendFailOrderProfit\") public void sendFailOrderProfit() { XxlJobHelper.log(\"每天11点30分再次发放失败的权益-开始\"); orderProfitService.sendHistoryDividendToMiaoyin(); XxlJobHelper.log(\"每天11点30分再次发放失败的权益-结束\"); }} 配置执行器（手动录入） admin 12345AppName*: mall-admin名称*: mall-admin注册方式*: 手动录入机器地址*: http://127.0.0.1:8081 search 12345AppName*: mall-search名称*: mall-search注册方式*: 手动录入机器地址*: http://127.0.0.1:8082 portal 12345AppName*: mall-portal名称*: mall-portal注册方式*: 手动录入机器地址*: http://127.0.0.1:8086 配置执行器(自动录入) mmall-portal AppName*: mmall-portal -- 与执行器配置的名称一致即可 名称*: mall-portal 注册方式*: 自动录入 特别说明：执行器启动成功后，需要操作： 执行器管理 --&gt; 新增--&gt; 录入上述内容--&gt; 保存; (间隔几秒就能看到执行器注册上了) 添加任务jobHandler 与cron admin 1234jobHandler: sendFailOrderProfit cron: 0 30 11 * * ?jobHandler: autoSignScheduled cron: 0 0 2 * * ?jobHandler: sendClosedOrderProfit cron: 1 0 0 * * ? search 12jobHandler: autoSyncProduct cron: 0 */5 * ? * * portal 1234jobHandler: autoCheckScheduled cron: 0 0 0/1 * * ?jobHandler: checkBargainTimeOutAndRecoverStock cron: 0 1/5 * ? * ?jobHandler: cancelTimeOutOrder cron: 0 0/5 * ? * ?","categories":[{"name":"categories","slug":"categories","permalink":"http://example.com/categories/categories/"}],"tags":[{"name":"tags","slug":"tags","permalink":"http://example.com/tags/tags/"}]},{"title":"Hello World","slug":"hello-world","date":"2024-07-01T08:41:55.192Z","updated":"2024-07-01T08:41:55.192Z","comments":true,"path":"2024/07/01/hello-world/","permalink":"http://example.com/2024/07/01/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"categories","slug":"categories","permalink":"http://example.com/categories/categories/"}],"tags":[{"name":"tags","slug":"tags","permalink":"http://example.com/tags/tags/"}]}